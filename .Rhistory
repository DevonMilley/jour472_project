qqline(turtlef$shell.length)
summary(lm(y~x1, data=reg_data))
summary(lm(y~x1+x2, data=reg_data))
lm(y~x1, data=reg_data)
lm(y~x1+x2, data=reg_data)
pairs(reg_data)
View(lab8)
my_data8 <- read.csv("/Users/dnm1023/Documents/INST314/lab 8/insurance_mod.csv")
pairs(my_data8)
View(my_data8)
lm(charges ~ age + bmi, data=my_data8)
pairs(lm(charges ~ age + bmi, data=my_data8))
summary(lm(charges ~ age + bmi, data=my_data8))
pairs(reg_data, upper.panel = panel.rsquare, diag.panel = panel.hist, lower.panel = panel.lm)
pais(my_data8, upper.panel = panel.rsquare, diag.panel = panel.hist, lower.panel = panel.lm)
pairs(my_data8, upper.panel = panel.rsquare, diag.panel = panel.hist, lower.panel = panel.lm)
View(titanic)
View(titanic_r)
summary(titanic_r)
summary(titanic)
summary(titanic_r)
summary(glm(survived ~ sex + class, data= titanic))
exp(sex)
exp(0.45608)
summary(glm(survived ~ sex + class, data= titanic))
exp(0.45608)
summary(titanic_r)
exp(0.28731)
View(my_data8)
lm(charges~age + bmi, data=my_data8)
summary(lm(charges~age + bmi, data=my_data8))
https://dbknews.com/2021/12/03/minimum-wage-board-of-regents-usm/
pairs9my_data8, upper.panel = panel.rsquare, diag.panel = panel.hist, lower.panel = panel.lm)
pairs(my_data8, upper.panel = panel.rsquare, diag.panel = panel.hist, lower.panel = panel.lm)
heart <- read.csv("/Users/dnm1023/Documents/INST314/final project stuff/heart_recoded.csv")
plot(heart)
View(heart)
plot(HeartDisease~ChestPainType, data=heart)
hist(HeartDisease~ChestPainType, data=heart)
hist(heart)
hist(heart$ChestPainType, heart$HeartDisease)
hist(ChestPainType, HeartDisease)
summary(heart)
hist(heart$ChestPainType)
plot(heart$ChestPainType, heart$HeartDisease)
boxplot(heart$ChestPainType)
boxplot(heart$ChestPainType, heart$HeartDisease)
plot(density(heart$ChestPainTpye))
qqplot(heart$ChestPainType)
qqplot(heart$ChestPainType, heart$HeartDisease)
qqline(heart$ChestPainType, heart$HeartDisease)
lm(HeartDisease~ChestPainType, data=heart)
glm(HeartDisease~ChestPainType, data=heart)
chest <- read.csv("/Users/dnm1023/Documents/INST314/final project stuff/recoded_chest_pain.csv")
View(chest)
lm(HeartDisease ~ ChestPainZero + ChestPainOne + ChestPainTwo + ChestPainThree, data=chest)
glm(HeartDisease ~ ChestPainZero + ChestPainOne + ChestPainTwo + ChestPainThree, data=chest)
chisq.test(heart$ChestPainType, heart$HeartDisease, correct=FALSE)
shapiro.test(heart$ChestPainType)
aov(HeartDisease ~ ChestPainType, data=heart)
anova_chest <- aov(HeartDisease ~ ChestPainType, data=heart)
summary(anova_test)
summary(anova_chest)
TurkeyHSD(anova_chest, conf.level=.95)
TukeyHSD(anova_chest, conf.level=.95)
TukeyHSD(anova_chest, ChestPainType, conf.level=.95)
TukeyHSD(anova_chest ~ factor(heart$ChestPainType))
TukeyHSD(aov(HeartDisease ~ ChestPainType, data=heart) ~ factor(heart$ChestPainType))
a_chest <- aov(RestingBP ~ ChestPainType, data=heart)
sumarry(a_chest)
summary(a_chest)
TukeyHSD(a_chest ~ factor(heart$ChestPainType))
hist(chest)
View(chest)
hist(chest)
barplot(chest)
barplot(chest)
barplot(heart$ChestPainType)
wilcox.test(HeartDisease ~ ChestPainType, data=heart)
View(heart)
wilcox.test(Cholesterol ~ ChestPainType, data=heart)
wilcox.test(HeartDisease ~ ChestPainType, data=heart)
wilcox.test(HeartDisease ~ Se, data=heart)
wilcox.test(HeartDisease ~ Sex, data=heart)
wilcox.test(Cholesterol ~ MaxHR, data=heart)
heart1 <- read.csv("/Users/dnm1023/Downloads/heart01.csv")
View(heart1)
wilcox.test(chol ~ sex, data=heart1)
wilcox.text(trestbps ~ sex, data=heart1)
wilcox.tex\st(trestbps ~ sex, data=heart1)
wilcox.tet(trestbps ~ sex, data=heart1)
wilcox.test(trestbps ~ sex, data=heart1)
heart1 <- read.csv("/Users/dnm1023/Downloads/heart01.csv")
> View(heart1)
> wilcox.test(chol ~ sex, data=heart1)
heart1 <- read.csv("/Users/dnm1023/Downloads/heart01.csv")
View(heart1)
wilcox.test(chol ~ sex, data=heart1)
wilcox.test(trestbps ~ sex, data=heart1)
summary(anova_chest)
TukeyHSD(anova_chest)
TukeyHSD(aov(HeartDisease ~ factor(ChestPainTpye), data=heart))
TukeyHSD(aov(HeartDisease ~ factor(ChestPainType), data=heart))
boxplot(heart$ChestPainType, heart$HeartDisease)
TukeyHSD(aov(HeartDisease ~ factor(ChestPainType), data=heart))
tukey_chest <- TukeyHSD(aov(HeartDisease ~ factor(ChestPainType), data=heart))
summary(tukey_chest)
tukey_chest
plot(tukey_chest)
cld(tukey_chest)
boxplot(heart)
boxplot(heart$ChestPainType, heart$HeartDisease)
5=5
2+2
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse. If you have not installed the tidyverse already, remove the # from the next line and run it first.
# install.packages('tidyverse')
library(tidyverse)
wv_ppp_loans <- read_rds("lab_01.rds")
glimpse(wv_ppp_loans)
# Write the code to produce your answer here
wv_ppp_loans %>%
group_by(project_county_name) %>%
summarise(
count_loans = n()
)
# Write the code to produce your answer here
wv_ppp_loans %>%
group_by(project_county_name) %>%
summarise(
count_loans = n()
) %>%
arrange(desc(count_loans))
# Write the code to produce your answer here
wv_ppp_loans %>%
group_by(project_county_name) %>%
summarise(
count_loans = n()
) %>%
arrange(asc(count_loans))
# Write the code to produce your answer here
wv_ppp_loans %>%
group_by(project_county_name) %>%
summarise(
count_loans = n()
) %>%
arrange(count_loans)
# Write the code to produce your answer here
ppp_maryland_loans %>%
arrange(desc(amount))
# Write the code to produce your answer here
wv_ppp_maryland_loans %>%
arrange(desc(amount))
# Write the code to produce your answer here
wv_ppp_loans %>%
arrange(desc(amount))
# Write the code to produce your answer here
wv_summary <- wv_ppp_loans %>%
summarise(
count_loans = n(),
total_loans_amount = sum(amount),
mean_loan_amount = mean(amount),
median_loan_amount = median(amount),
min_loan_amount = min(amount),
max_loan_amount = max(amount)
)
View(wv_summary)
View(wv_summary)
knitr::opts_chunk$set(echo = TRUE)
prince_georges <- maryland_ppp %>% filter(project_county_name == "PRINCE GEORGES")
knitr::opts_chunk$set(echo = TRUE)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate) # look up lubridate and describe its uses in your reference notebook
maryland_ppp <- read_csv('data/ppp_applications_md.csv.zip')
head(maryland_ppp)
summary(maryland_ppp)
colnames(maryland_ppp)
glimpse(maryland_ppp)
maryland_ppp %>%
select(loan_number, amount, payroll_proceed) %>%
mutate(
percent_payroll = payroll_proceed/amount
)
# make it a percentage
maryland_ppp %>%
select(loan_number, amount, payroll_proceed) %>%
mutate(
percent_payroll = (payroll_proceed/amount)*100
)
# better ordering?
maryland_ppp %>%
select(loan_number, amount, payroll_proceed) %>%
mutate(
percent_payroll = (payroll_proceed/amount)*100
)  %>% arrange(desc(percent_payroll))
# actual better ordering
maryland_ppp %>%
select(loan_number, amount, payroll_proceed) %>%
mutate(
percent_payroll = (payroll_proceed/amount)*100
)  %>% arrange(percent_payroll, desc(amount))
# if/else example
maryland_with_in_out <- maryland_ppp %>%
mutate(
in_out = if_else(
servicing_lender_state == 'MD', "IN", "OUT"
)
)
prince_georges <- maryland_ppp %>% filter(project_county_name == "PRINCE GEORGES")
head(prince_georges)
and_prince_georges <- maryland_ppp %>% filter(project_county_name == "PRINCE GEORGES" & business_type == "Non-Profit Organization" & amount > 150000)
nrow(and_prince_georges)
or_prince_georges <- maryland_ppp %>% filter(project_county_name == "PRINCE GEORGES" | business_type == "Non-Profit Organization" | amount > 150000)
nrow(or_prince_georges)
# using read.csv
maryland_ppp_sample <- read.csv('data/ppp_maryland.csv')
glimpse(maryland_ppp_sample)
lubridate_maryland_ppp <- maryland_ppp_sample %>% mutate(
CleanDate = ymd_hms(date_approved)
)
glimpse(lubridate_maryland_ppp)
lubridate_maryland_ppp <- maryland_ppp_sample %>% mutate(
CleanDate = ymd_hms(date_approved)
)
glimpse(lubridate_maryland_ppp)
# using read_csv from the tidyverse
maryland_ppp_sample <- read_csv('data/ppp_maryland.csv')
glimpse(maryland_ppp_sample)
maryland_ppp %>%
mutate(Month = floor_date(date_approved, "month")) %>%
group_by(Month) %>%
summarise(total = n()) %>%
arrange(desc(total))
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse here
library(tidyverse)
# Load janitor here
library(janitor)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse here
library(tidyverse)
# Load janitor here
library(janitor)
# Write code to load the WV slice of the ppp loan data here and call it wv_ppp_loans.
# The data is called lab_03.rds, and is in the same folder as lab_03.Rmd (this data notebook)
wv_ppp_loans <- read_rds("lab_03.rds")
# Write your code in this codeblock.
cleaned_wv_cities_ppp <- wv_ppp_loans %>%
mutate(city = str_to_title(city)) %>%
mutate(city = case_when(
city == "S Charleston" ~ "South Charleston",
city == "So Charleston" ~ "South Charleston",
city == "Charelston" ~ "Charleston",
city == "Elkveiw" ~ "Elkview",
city == "Balle" ~ "Belle",
city == "Crosslanes" ~ "Cross Lanes",
str_detect(city, "^St") ~ "Saint Albans",
TRUE ~ city
))
cleaned_wv_cities_ppp %>%
filter(project_county_name == "KANAWHA") %>%
group_by(city) %>%
summarise(count_loans = n()) %>%
arrange(desc(count_loans))
# Hint
# First, create a dataframe that shows the top 5-digit ZIP code by total dollar amount
cleaned_wv_zip_ppp <- wv_ppp_loans %>%
mutate(zip = str_sub(zip, star=1L, end=5L))
cleaned_wv_zip_ppp %>%
group_by(zip) %>%
summarise(total_loans_amount = sum(amount)) %>%
arrange(desc(total_loans_amount))
# Second, use the top ZIP code to create a separate dataframe that shows the business with the biggest loan in that ZIP code.
cleaned_wv_zip_ppp %>%
filter(zip == "25301") %>%
arrange(desc(amount))
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
#arrange(name)
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "
DUTCH MILLER OF CHARLESTON, INC" | name == "
DUTCH MILLER OF CHARLOTTE, INC" | name == "
DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
#arrange(name)
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "DUTCH MILLER OF CHARLESTON, INC" | name == "DUTCH MILLER OF CHARLOTTE, INC" | name == "DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "DUTCH MILLER OF CHARLESTON, INC" | name == "DUTCH MILLER OF CHARLOTTE, INC" | name == "DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
wv_spouse_summary <- wv_spouse_business_ppp %>%
summarise(
total_loans_amount = sum(amount)
)
View(wv_spouse_summary)
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "DUTCH MILLER OF CHARLESTON, INC" | name == "DUTCH MILLER OF CHARLOTTE, INC" | name == "DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
wv_spouse_summary <- wv_spouse_business_ppp %>%
summarise(
total_loans_amount = sum(amount) %>%
percent_forgiven = (forgiveness_amount/amount)*100
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "DUTCH MILLER OF CHARLESTON, INC" | name == "DUTCH MILLER OF CHARLOTTE, INC" | name == "DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
wv_spouse_summary <- wv_spouse_business_ppp %>%
summarise(
total_loans_amount = sum(amount)) %>%
summarise(percent_forgiven = (forgiveness_amount/amount)*100
)
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "DUTCH MILLER OF CHARLESTON, INC" | name == "DUTCH MILLER OF CHARLOTTE, INC" | name == "DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
wv_spouse_summary <- wv_spouse_business_ppp %>%
summarise(
total_loans_amount = sum(amount),
percent_forgiven = (forgiveness_amount/amount)*100
)
# Hint
# First, create a dataframe that only has loans to those five companies
wv_spouse_business_ppp <- wv_ppp_loans %>%
filter(name == "DM MOTOR, INC" | name == "DUTCH MILLER CHEVROLET, INC." | name == "DUTCH MILLER OF CHARLESTON, INC" | name == "DUTCH MILLER OF CHARLOTTE, INC" | name == "DUTCH MILLER SUBARU, INC")
# Second, use that newly created dataframe to calculate total loan amount and percentage forgiven for those companies
wv_spouse_summary <- wv_spouse_business_ppp %>%
summarise(
total_loans_amount = sum(amount),
percent_forgiven = (sum(forgiveness_amount)/sum(amount))*100
)
knitr::opts_chunk$set(echo = TRUE)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
popestimate_2010 <- read_csv("data/popestimate_2010.csv")
popestimate_2015 <- read_csv("data/popestimate_2015.csv")
popestimate_2020 <- read_csv("data/popestimate_2020.csv")
# bind_rows with list
estimates <- bind_rows(list(popestimate_2010, popestimate_2015, popestimate_2020))
View(estimates)
maryland_ppp <- read_csv("data/ppp_applications_md.csv")
naics_codes <- read_csv('data/naics_codes.csv')
# with nrow included to match row total
maryland_ppp %>% left_join(naics_codes, by="naics_code") %>% select(name, naics_code, title) %>% nrow()
# without nrow
maryland_ppp %>% left_join(naics_codes) %>% select(name, naics_code, title)
maryland_ppp_with_naics <- maryland_ppp %>% left_join(naics_codes)
maryland_zcta <- read_csv('data/maryland_zcta.csv')
# join on zip - but there's a problem
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip"="ZCTA5N"))
maryland_zcta <- maryland_zcta %>% mutate(across(ZCTA5N, as.character))
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip"="ZCTA5N"))
View(maryland_ppp_with_naics_and_demographics)
# make a zip5 column and redo the join
maryland_ppp_with_naics <- maryland_ppp_with_naics %>% mutate(zip5 = str_sub(zip, 1, 5))
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip5"="ZCTA5N"))
# zcta with > 50% non-Hispanic Black population
maryland_ppp_with_naics_and_demographics %>%
filter(PNHB > 50) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# zcta with > 50% non-Hispanic white population
maryland_ppp_with_naics_and_demographics %>%
filter(PNHW > 50) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# zcta with > 50% non-Hispanic Black population grouped by rural/urban
maryland_ppp_with_naics_and_demographics %>%
filter(PNHB > 50) %>%
group_by(rural_urban_indicator) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# zcta with > 50% non-Hispanic white population grouped by rural/urban
maryland_ppp_with_naics_and_demographics %>%
filter(PNHW > 50) %>%
group_by(rural_urban_indicator) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
knitr::opts_chunk$set(echo = TRUE)
install.packages('refinr')
install.packages('refinr')
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
library(refinr)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
library(refinr)
# Load data
md_loans <- read_csv("data/ppp_loans_md.csv.zip")
# Load data
md_loans <- read_csv("data/ppp_loans_md.csv.zip")
# Display it
md_loans
# Now let's try and group and count the number of loans by city. To make it a bit more managable, let's use another string function from `stringr` and filter for cities that start with the uppercase "A" or lowercase "a" using the function `str_detect()` with a regular expression.
# The filter function in the codeblock below says: look in the city column, and pluck out any value that starts with (the "^" symbol means "starts with") a lowercase "a" OR (the vertical "|", called a pipe, means OR) an uppercase "A".
md_loans %>%
group_by(city) %>%
summarise(
count=n()
) %>%
filter(str_detect(city, "^a|^A")) %>%
arrange(city)
cleaned_md_loans <- md_loans %>%
mutate(city_clean=key_collision_merge(city)) %>%
select(id:city, city_clean, everything())
cleaned_md_loans
cleaned_md_loans %>%
group_by(city_clean, city) %>%
summarise(
count=n()
) %>%
filter(str_detect(city, "^a|^A")) %>%
arrange(city)
cleaned_md_loans <- md_loans %>%
mutate(city_clean=n_gram_merge(city)) %>%
select(id:city, city_clean, everything())
cleaned_md_loans %>%
group_by(city_clean, city) %>%
summarise(
count=n()
) %>%
filter(str_detect(city, "^a|^A")) %>%
arrange(city)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
options(scipen=999)
install.packages("janitor")
library(tidyverse)
install.packages("tidyverse")
options(scipen=999)
install.packages("janitor")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
options(scipen=999)
install.packages("janitor")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
options(scipen=999)
install.packages("janitor")
library(tidyverse)
install.packages("tidyverse")
options(scipen=999)
install.packages("janitor")
library(tidyverse)
# Load required data
la_payouts <- read.csv("data/la_city_legal_payouts.csv")
View(la_payouts)
# Clean required data and prepare for analysis if needed.
la_payouts <- la_payouts %>% mutate(AMOUNT=as.numeric(parse_number(AMOUNT)))
#sum payouts for 2018
la_payouts%>%
group_by(Year)%>%
summarize(
count = n(),
total = sum(AMOUNT))
# Load required data
la_payouts <- read.csv("data/la_city_legal_payouts.csv")
View(la_payouts)
# Clean required data and prepare for analysis if needed.
la_payouts <- la_payouts %>% mutate(AMOUNT=as.numeric(parse_number(AMOUNT)))
# Put code to reverse engineer sentence here
#sum payouts for 2018
la_payouts%>%
group_by(Year)%>%
summarize(
count = n(),
total = sum(AMOUNT))
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
#sum payouts for 2018
la_payouts%>%
group_by(Year)%>%
summarize(
count = n(),
total = sum(AMOUNT)) %>%
arrange(desc(total))
# Display results of code below this codeblock
