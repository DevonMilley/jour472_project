lab_data <- read_csv("/Users/devonmilley/Documents/UMD/sem 5/INST314/GSS-Lab-9.17.csv")
lab_data = lab_data %>%
clean_names()
lab_data$hours_wkd = as.numeric(lab_data$hours_wkd)
question_4 = lab_data %>%
mutate(grouped_hours_worked = case_when(
(hours_wkd %in% c(1:20)) == TRUE ~ "1-20",
(hours_wkd %in% c(21:40)) == TRUE ~ "21-40",
(hours_wkd %in% c(41:60)) == TRUE ~ "41-60",
(hours_wkd %in% c(61:80)) == TRUE ~ "61-80",
(hours_wkd %in% c(81:89)) == TRUE ~ "81-90")) %>%
group_by(sex, grouped_hours_worked) %>%
summarise(mean_salary = mean(income_recode)) %>%
pivot_wider(names_from = grouped_hours_worked, values_from = mean_salary)
question_4
View(lab_data)
knitr::opts_chunk$set(echo = TRUE)
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
(pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
(pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
(pct_white %in% c(50.01:75)) == TRUE ~ "50-75% white neighborhood",
(pct_white %in% c(75.01:100)) == TRUE ~ "75-100% white neighborhood"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(janitor)
library(lubridate)
# Load required data
metro_grades<-read_csv("data/metro-grades.csv")
zone_block_matches<-st_read("data/zone-block-matches.csv")
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
(pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
(pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
(pct_white %in% c(50.01:75)) == TRUE ~ "50-75% white neighborhood",
(pct_white %in% c(75.01:100)) == TRUE ~ "75-100% white neighborhood"))
#  group_by(holc_grade, white_neighborhoods_count) %>%
# summarise(
#)
View(holc_count_white)
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
(pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
(pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
(pct_white %in% c(50.01:75)) == TRUE ~ "50-75% white neighborhood",
(pct_white %in% c(75.01:100)) == TRUE ~ "75-100% white neighborhood")) %>%
group_by(holc_grade, white_neighborhoods_count)
# summarise(
#)
View(holc_count_white)
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
(pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
(pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
(pct_white %in% c(50.01:75)) == TRUE ~ "50-75% white neighborhood",
(pct_white %in% c(75.01:100)) == TRUE ~ "75-100% white neighborhood")) %>%
group_by(holc_grade, white_neighborhoods_count) %>%
summarise(
count = n()
)
View(holc_count_white)
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
(pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
(pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
(pct_white %in% c(50.01:75)) == TRUE ~ "50-75% white neighborhood",
(pct_white %in% c(75.01:100)) == TRUE ~ "75-100% white neighborhood")) %>%
group_by(white_neighborhoods_count, holc_grade) %>%
summarise(
count = n()
)
# lets do quartiles of percentages !!!, also consider plurality, not just majority
# Put code to reverse engineer sentence here
holc_count_white <- metro_grades %>%
mutate(
white_neighborhoods_count = case_when(
(pct_white %in% c(0:25)) == TRUE ~ "0-25% white neighborhood",
(pct_white %in% c(25.01:50)) == TRUE ~ "25-50% white neighborhood",
(pct_white %in% c(50.01:75)) == TRUE ~ "50-75% white neighborhood",
(pct_white %in% c(75.01:100)) == TRUE ~ "75-100% white neighborhood")) %>%
group_by(white_neighborhoods_count) %>%
summarise(
count = n()
)
# Put code to reverse engineer sentence here
holc_grades_by_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n()
)
# Display results of code below this codeblock
View(holc_grades_by_race)
# Put code to reverse engineer sentence here
holc_grades_by_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n(),
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100
)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
holc_grades_by_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n()
#pct_white = (white_pop/total_pop)*100,
#pct_black = (black_pop/total_pop)*100,
#pct_hisp = (hisp_pop/total_pop)*100,
#pct_asian = (asian_pop/total_pop)*100,
#pct_other = (other_pop/total_pop)*100
)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n()
)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n()
)
holc_grades_by_race <- holc_grades %>%
for (x in holc_grades){
summarise(
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100)
}
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n()
)
holc_grades_by_race <- holc_grades %>%
for (x in holc_grades){
print(x)
}
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
count = n()
)
#holc_grades_by_race <- holc_grades %>%
for (x in holc_grades){
print(x)
}
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
summarise(
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100)
)
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
summarise(
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100)
)
# Put code to reverse engineer sentence here
holc_grades <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100)
)
# Put code to reverse engineer sentence here
holc_grades_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100)
# Display results of code below this codeblock
View(holc_grades_by_race)
View(holc_grades_race)
# Put code to reverse engineer sentence here
holc_grades_race <- metro_grades %>%
summarise(
pct_white = (white_pop/total_pop)*100,
pct_black = (black_pop/total_pop)*100,
pct_hisp = (hisp_pop/total_pop)*100,
pct_asian = (asian_pop/total_pop)*100,
pct_other = (other_pop/total_pop)*100) %>%
group_by(holc_grade)
# Put code to reverse engineer sentence here
holc_grades_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
pct_white,
pct_black,
pct_hisp,
pct_asian,
pct_other)
# Display results of code below this codeblock
View(holc_grades_race)
# Put code to reverse engineer sentence here
holc_grades_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
pct_white,
pct_black,
pct_hisp,
pct_asian,
pct_other,
count= n())
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
holc_grades_race <- metro_grades %>%
group_by(holc_grade) %>%
summarise(
pct_white,
pct_black,
pct_hisp,
pct_asian,
pct_other)
# Display results of code below this codeblock
View(holc_grades_race)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
# Display results of code below this codeblock
View(metro_grades_plus_state)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(holc_grade, state) %>%
summarise(
count=n()
)
# Display results of code below this codeblock
View(holc_by_state)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(holc_grade, state) %>%
summarise(
count=n()
) %>%
arrange(state)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(holc_grade, state) %>%
summarise(
count=n()
) %>%
arrange(holc_grade, count)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(holc_grade, state) %>%
summarise(
count=n()
) %>%
arrange(holc_grade, desc(count))
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(holc_grade, state) %>%
summarise(
count=n()
) %>%
#arrange(holc_grade, desc(count))
arrange(state)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise(
count=n()
) %>%
#arrange(holc_grade, desc(count))
arrange(state)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
for (holc_grade in metro_grades_plus_state){
print(holc_grade)
}
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
#holc_by_state <- metro_grades_plus_state %>%
for (holc_grade in metro_grades_plus_state){
print(holc_grade)
}
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
View(metro_grades_plus_state)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
mutate( grades = case_when(
holc_grade == "A" ~ "A",
holc_grade == "B" ~ "B",
holc_grade == "C" ~ "C",
holc_grade == "D" ~ "D"))
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise( grades = case_when(
holc_grade == "A" ~ "A",
holc_grade == "B" ~ "B",
holc_grade == "C" ~ "C",
holc_grade == "D" ~ "D"))
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
summarise( grades = case_when(
holc_grade == "A" ~ "A",
holc_grade == "B" ~ "B",
holc_grade == "C" ~ "C",
holc_grade == "D" ~ "D")) %>%
group_by(state, grades) %>%
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
summarise( grades = case_when(
holc_grade == "A" ~ "A",
holc_grade == "B" ~ "B",
holc_grade == "C" ~ "C",
holc_grade == "D" ~ "D")) %>%
group_by(state, grades)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
summarise( grades = case_when(
holc_grade == "A" ~ "A",
holc_grade == "B" ~ "B",
holc_grade == "C" ~ "C",
holc_grade == "D" ~ "D")) %>%
group_by(grades)
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise(
a_count = sum(holc_grade == "A")
)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise(
a_count = sum(holc_grade == "A"),
b_count = sum(holc_grade == "B"),
c_count = sum(holc_grade == "C"),
d_count = sum(holc_grade == "D")
)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise(
a_count = sum(metro_grades_plus_state$holc_grade == "A"),
b_count = sum(metro_grades_plus_state$holc_grade == "B"),
c_count = sum(metro_grades_plus_state$holc_grade == "C"),
d_count = sum(metro_grades_plus_state$holc_grade == "D")
)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise(
a_count = sum(holc_grade == "A"),
b_count = sum(holc_grade == "B"),
c_count = sum(holc_grade == "C"),
d_count = sum(holc_grade == "D")
)
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
for(x in state) {
summarise(
a_count = sum(holc_grade == "A"),
b_count = sum(holc_grade == "B"),
c_count = sum(holc_grade == "C"),
d_count = sum(holc_grade == "D")
)
}
# Put code to reverse engineer sentence here
metro_grades_plus_state <- metro_grades %>%
mutate(
state=str_sub(metro_area, start=-2, end=-1)
)
holc_by_state <- metro_grades_plus_state %>%
group_by(state) %>%
summarise(
a_count = sum(holc_grade == "A"),
b_count = sum(holc_grade == "B"),
c_count = sum(holc_grade == "C"),
d_count = sum(holc_grade == "D")
)
